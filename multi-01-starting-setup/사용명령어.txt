`docker run` 명령어를 사용하여 Docker 컨테이너를 생성하고 실행하는 방법에 대해 설명하겠습니다. 

1. `docker run --name mongodb --rm -d mongo`: 이 명령어는 "mongodb"라는 이름의 도커 컨테이너를 생성하고 백그라운드에서 실행합니다. 이 컨테이너는 "mongo" 이미지를 기반으로 합니다. `--rm` 옵션은 컨테이너가 종료된 후에 자동으로 컨테이너를 삭제하라는 명령입니다. `-d` 옵션은 컨테이너를 백그라운드에서 실행하라는 명령입니다.

    예를 들어, 이것은 마치 백그라운드에서 플레이되는 라디오와 같습니다. 라디오는 이름이 있고(여기서는 "mongodb"), 라디오 방송이 끝나면 자동으로 전원이 꺼집니다(`--rm` 옵션). 또한 우리는 라디오를 들으면서 다른 일을 할 수 있습니다(`-d` 옵션).

2. `docker run --name mongodb --rm -d -p 27017:27017 mongo`: 이 명령어는 위의 명령어와 거의 동일하지만, 추가로 `-p 27017:27017` 옵션이 있습니다. 이 옵션은 호스트의 27017번 포트와 컨테이너의 27017번 포트를 연결하라는 의미입니다. 

    이것은 마치 라디오가 특정 주파수(여기서는 27017번 포트)로 방송되고, 우리가 그 주파수로 라디오를 튜닝하여 듣는 것과 같습니다. 이렇게 하면, 우리는 컴퓨터의 27017번 포트로 접속하여 MongoDB 서비스에 접근할 수 있게 됩니다.

////////////////////

설명해주신 명령어들은 Docker 이미지와 컨테이너를 관리하는데 사용됩니다. 

1. `docker image prune`: 이 명령어는 사용하지 않는 Docker 이미지를 제거합니다. 창고를 정리하는 것처럼, 이 명령어를 사용하면 더 이상 필요하지 않은 물건(이미지)을 제거하여 공간을 확보할 수 있습니다.

2. `docker build -t goals-node .`: 이 명령어는 현재 디렉토리에 있는 Dockerfile을 사용하여 "goals-node"라는 이름의 Docker 이미지를 생성합니다. 이는 마치 레시피(Dockerfile)를 따라 요리(이미지)를 만드는 것과 같습니다.

3. `docker run --name goals-backend --rm -d goals-node`: 이 명령어는 "goals-node" 이미지를 기반으로 "goals-backend"라는 이름의 Docker 컨테이너를 백그라운드에서 실행합니다. 컨테이너가 종료되면 자동으로 제거됩니다. 이는 마치 라디오를 백그라운드에서 재생하고, 라디오 방송이 끝나면 자동으로 전원을 끄는 것과 같습니다.

4. `docker run --name goals-backend --rm -d -p 80:80 goals-node`: 이 명령어는 위의 명령어와 거의 동일하지만, 추가로 `-p 80:80` 옵션이 있습니다. 이 옵션은 호스트의 80번 포트와 컨테이너의 80번 포트를 연결합니다. 이는 마치 라디오가 특정 주파수로 방송되고, 우리가 그 주파수로 라디오를 튜닝하여 듣는 것과 같습니다. 이렇게 설정하면, 컴퓨터의 80번 포트를 통해 컨테이너의 서비스에 접근할 수 있습니다.

////////////////////

명령어들에 대해 설명하겠습니다:

1. `docker build -t goals-react .`: 이 명령어는 현재 디렉토리(`.`)의 Dockerfile을 사용하여 "goals-react"라는 이름의 Docker 이미지를 만듭니다. 여기서 `-t` 옵션은 이미지에 이름을 지정하는 데 사용됩니다. 이것은 마치 요리를 준비하듯, 레시피(Dockerfile)를 따라서 요리(이미지)를 만드는 과정입니다.

2. `docker run --name goals-frontend --rm -d -p 3000:3000 goals-react`: 이 명령어는 "goals-react" 이미지를 기반으로 "goals-frontend"라는 이름의 Docker 컨테이너를 백그라운드에서 실행합니다. 이 컨테이너는 종료되면 자동으로 삭제됩니다(`--rm`). 또한, 컴퓨터의 3000번 포트와 컨테이너의 3000번 포트를 연결합니다(`-p 3000:3000`). 이는 마치 라디오를 백그라운드에서 재생하고, 라디오 방송이 끝나면 자동으로 전원을 끄는 것과 같습니다.

3. `docker run --name goals-frontend --rm -it -p 3000:3000 goals-react`: 이 명령어는 위의 명령어와 거의 동일하지만, `-it` 옵션이 추가되어 있습니다. 이 옵션은 대화형 터미널을 사용하여 컨테이너를 실행하라는 의미입니다. 이는 React 프론트엔드를 실행할 때 필요한 옵션으로, 사용자가 웹 애플리케이션과 상호작용할 수 있게 합니다. 이것은 마치 텔레비전에 앉아서 리모컨을 사용하여 채널을 변경하거나 볼륨을 조절하는 것과 같습니다.

/////////////////////

이 명령어들은 Docker를 사용하여 MongoDB 서버, 백엔드(Node.js), 그리고 프론트엔드(React)를 실행하는 것을 관리합니다. 각 명령어의 동작을 메타포를 이용해 설명하겠습니다.

1. `docker network create goals-net`
   이 명령어는 도심에서 도로를 만드는 것과 같습니다. 이 도로(`goals-net`라는 네트워크)를 통해 차량(컨테이너)들이 움직일 수 있게 됩니다.

2. `docker run --name mongodb --rm -d --network goals-net mongo`
   이 명령어는 도로 위에 차량(여기서는 `mongodb`라는 이름의 컨테이너)을 배치하는 것과 같습니다. 이 차량은 `goals-net`이라는 도로를 통해 다른 차량들과 연결될 수 있습니다.

3. `docker run --name goals-backend --rm -d --network goals-net -p 80:80 goals-node`
   이 명령어는 또 다른 차량(`goals-backend`라는 이름의 컨테이너)을 도로 위에 배치하는 것입니다. 이 차량은 80번 고속도로를 통해 외부 세계와 연결되며, `goals-net`이라는 도로를 통해 다른 차량들과도 연결됩니다.

4. `docker run --name goals-frontend --rm -it -p 3000:3000 goals-react`
   이 명령어는 마지막으로 차량(`goals-frontend`라는 이름의 컨테이너)을 도로 위에 배치하는 것입니다. 이 차량은 3000번 고속도로를 통해 외부 세계와 연결됩니다. 하지만 이 차량은 `goals-net`이라는 도로를 통해 다른 차량들과는 연결되지 않습니다.

그러므로, 이 명령어들을 통해 우리는 도로를 만들고, 그 도로 위에 차량들을 배치하며, 차량들이 서로 어떻게 연결되는지를 제어합니다. 이 모든 것이 가능한 이유는 Docker라는 강력한 도구 덕분입니다.

//////////////////

이 두 명령어는 Docker를 사용하여 MongoDB 서버를 실행하는 것에 관련되어 있습니다. 하지만 두 명령어는 약간 다른 작업을 수행합니다. 메타포를 이용해 설명하겠습니다.

1. `docker run --name mongodb -v data:/data/db --rm -d --network goals-net mongo`
   
   이 명령어는 차고에 차량(여기서는 `mongodb`라는 이름의 컨테이너)을 주차하는 것과 같습니다. 이 차량은 `goals-net`이라는 도로를 통해 다른 차량들과 연결될 수 있습니다. 또한, `-v data:/data/db` 옵션은 차량의 트렁크에 물건(`data`라는 볼륨)을 넣는 것과 같습니다. 이 트렁크 안의 물건은 차량이 주차되면서 함께 저장됩니다.

2. `docker run --name mongodb -v data:/data/db --rm -d --network goals-net -e MONGO_INITDB_ROOT_USERNAME=max -e MONGO_INITDB_ROOT_PASSWORD=secret mongo`
   
   이 명령어는 위의 명령어와 거의 비슷하지만, 차량에 추가로 키(`MONGO_INITDB_ROOT_USERNAME`와 `MONGO_INITDB_ROOT_PASSWORD` 환경 변수)를 제공하는 것과 같습니다. 이 키는 차량의 문을 열거나, 차량을 운전하는데 필요한 정보를 제공합니다.

따라서, 이 명령어들을 통해 차량을 주차하고, 트렁크에 물건을 넣으며, 차량의 키를 제공하는 것을 관리할 수 있습니다. 이 모든 것이 가능한 이유는 Docker라는 강력한 도구 덕분입니다.

/////////////////

docker run --name goals-backend -v /app/node_modules -v C:\Users\ChanYoungPark\Desktop\docker_practice\multi-01-starting-setup\backend:/app -v logs:/app/logs --rm --network goals-net -p 80:80 goals-node

코드 변경 시 노드 재시작을 위해 package.json에 nodemon 추가하고 start script 추가 그리고 Dockerfile 에 npm start로 커맨드 변경.

docker run --name goals-backend -v /app/node_modules -v C:\Users\ChanYoungPark\Desktop\docker_practice\multi-01-starting-setup\backend:/app -v logs:/app/logs --rm --network goals-net -p 80:80 -e MONGODB_USERNAME=max goals-node

DockerFile에 지정된 환경변수 PASSWORD + 커맨드 지정 환경변수 USERNAME 사용.

////////////////////

docker run -v C:\Users\ChanYoungPark\Desktop\docker_practice\multi-01-starting-setup\frontend\src:/app/src --name goals-frontend --rm -p 3000:3000 -it goals-react
react의 src폴더를 바인드 마운트


