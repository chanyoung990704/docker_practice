version: '3.8'

services:
  server:
    image: 'nginx: stable-alpine' // 경량화 버전 사용
    // 들어오는 요청을 보고 PHP로 전달
    
  # php: 
  # mysql:
  # composer:
  # artisan:
  # npm:

##################################################

  services:
  server:
    image: 'nginx: stable-alpine'
    ports:
      - '8000:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro // readOnly설정.


###################################################
nginx.conf

    server {
    listen 80;
    index index.php index.html;
    server_name localhost;
    root /var/www/html/public; // 디렉터리 중요
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:3000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

#########################################################
php.dockerfile
    FROM php:7.4-fpm-alpine

    WORKDIR /var/www/html

    RUN docker-php-ext-install pdo pdo_mysql

    CMD나 ENTRYPOINT가 명시되지 않은 경우 BASE이미지의 것들을 사용한다.

#####################################################


services:
  server:
    image: 'nginx: stable-alpine'
    ports:
      - '8000:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  php:
    build:
      context: ./dockerfiles // 도커 파일 폴더
      dockerfile: php.dockerfile // 도커 파일 명
    volumes:
      - ./src:/var/www/html:delegated  // delegated : 성능 향상
  # mysql:
  # composer:
  # artisan:
  # npm:

#######################################################

docker-compose run --rm composer
  단일 컨테이너 실행

docker-compose run --rm composer create-project --prefer-dist laravel/laravel .
  Laravel 앱 만들기 위해 추가

##################################################

더 많은 유틸리티 컨테이너 추가하기
  docker-compose run --rm artisan migrate
    migrage : artisan에 사용되는 명령어
  