version: '3.8'

services:
  server:
    image: 'nginx: stable-alpine' // 경량화 버전 사용
    // 들어오는 요청을 보고 PHP로 전달
    
  # php: 
  # mysql:
  # composer:
  # artisan:
  # npm:

##################################################

  services:
  server:
    image: 'nginx: stable-alpine'
    ports:
      - '8000:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro // readOnly설정.


###################################################
nginx.conf

    server {
    listen 80;
    index index.php index.html;
    server_name localhost;
    root /var/www/html/public; // 디렉터리 중요
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:3000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

#########################################################
php.dockerfile
    FROM php:7.4-fpm-alpine

    WORKDIR /var/www/html

    RUN docker-php-ext-install pdo pdo_mysql

    CMD나 ENTRYPOINT가 명시되지 않은 경우 BASE이미지의 것들을 사용한다.

#####################################################


services:
  server:
    image: 'nginx: stable-alpine'
    ports:
      - '8000:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  php:
    build:
      context: ./dockerfiles // 도커 파일 폴더
      dockerfile: php.dockerfile // 도커 파일 명
    volumes:
      - ./src:/var/www/html:delegated  // delegated : 성능 향상
  # mysql:
  # composer:
  # artisan:
  # npm:

#######################################################

docker-compose run --rm composer
  단일 컨테이너 실행

docker-compose run --rm composer create-project --prefer-dist laravel/laravel .
  Laravel 앱 만들기 위해 추가

##################################################

더 많은 유틸리티 컨테이너 추가하기
  docker-compose run --rm artisan migrate
    migrage : artisan에 사용되는 명령어

##################################################

부가적인 dockerfile
  docker-compose에서 working_dir이나 ENTRYPOINT 사용 대체
  컨테이너에 필요한 모든 것이 컨테이너 내부에 모두 존재한다.

FROM nginx:stable-alpine
  
WORKDIR /etc/nginx/conf.d

COPY nginx/nginx.conf .

RUN mv nginx.conf default.conf

WORKDIR /var/www/html

COPY src .

=========> 이하 코드 설명.

이 코드는 Docker를 사용하여 Nginx 서버를 설정하는 데 사용되는 Dockerfile의 일부입니다. 각 줄의 세부 사항은 다음과 같습니다:

1. `FROM nginx:stable-alpine`: 이 줄은 Docker 이미지의 기본을 설정합니다. 이 경우, `nginx:stable-alpine`이라는 이미지를 기반으로 합니다. 이는 Nginx의 안정적인 버전을 가진 경량 버전의 Alpine Linux를 사용합니다.

2. `WORKDIR /etc/nginx/conf.d`: 이 명령어는 Docker 컨테이너 내에서 작업 디렉토리를 `/etc/nginx/conf.d`로 설정합니다. 이 디렉토리는 Nginx의 설정 파일들이 위치하는 곳입니다.

3. `COPY nginx/nginx.conf .`: 이 명령어는 로컬 시스템의 `nginx/nginx.conf` 파일을 작업 디렉토리(`/etc/nginx/conf.d`)에 복사합니다. 

4. `RUN mv nginx.conf default.conf`: 이 명령어는 `nginx.conf` 파일의 이름을 `default.conf`로 변경합니다. 이는 Nginx가 기본적으로 이 파일을 로드하기 때문입니다.

5. `WORKDIR /var/www/html`: 이 명령어는 작업 디렉토리를 `/var/www/html`로 변경합니다. 이 디렉토리는 일반적으로 웹 서버의 기본 디렉토리로 사용됩니다.

6. `COPY src .`: 이 명령어는 로컬 시스템의 `src` 디렉토리를 작업 디렉토리(`/var/www/html`)에 복사합니다. 이는 웹 서버가 호스팅할 웹 사이트의 소스 코드를 컨테이너에 추가하는 것입니다.

이를 비유하자면, Dockerfile은 집을 짓는 데 필요한 청사진과 같습니다. `FROM` 명령어는 집의 기반을 만드는 것과 같고, `WORKDIR`는 현재 작업하고 있는 방을 지정하는 것과 같습니다. `COPY`는 필요한 물건을 해당 방에 가져다 놓는 것과 같으며, `RUN`은 그 방에서 어떤 작업을 수행하는 것과 같습니다. 이처럼 Dockerfile은 컨테이너를 만들고 설정하는 방법을 단계별로 설명합니다.

services:
  server:
    # image: 'nginx:stable-alpine'
    build: 
      context: . // 여기서 .으로 경로설정한 이유? server가 사용되는 곳이 메인 프로젝트의 경로인 . 이기 떄문에 추후 속성에서도 메인 경로를 사용할 수 있도록..
      dockerfile: dockerfiles/nginx.dockerfile
